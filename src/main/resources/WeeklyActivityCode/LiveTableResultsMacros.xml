<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc>
  <web>WeeklyActivityCode</web>
  <name>LiveTableResultsMacros</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1408609534000</creationDate>
  <date>1408615117000</date>
  <contentUpdateDate>1408615117000</contentUpdateDate>
  <version>1.1</version>
  <title>LiveTableResultsMacros</title>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output=false}}

#**
 * Macro to get the results of a livetable data call.
 * This page is called from live grids via Ajax with the argument xpage=plain. It returns a
 * set of results serialized in JSON.
 *#
#macro(gridresultwithfilter $className $collist $filterfrom $filterwhere $filterParams)
  #if("$!{request.xpage}" == 'plain')
    $response.setContentType('application/json')
  #end
  #set($offset = $util.parseInt($request.get('offset')))
  ## offset starts from 0 in velocity and 1 in javascript
  #set($offset = $offset - 1)
  #if($offset &lt; 0)
    #set($offset = 0)
  #end
  #set($limit = $util.parseInt($request.get('limit')))
  #set($tablelist = $util.arrayList)
  ##
  ##
  ##
  ## Compute the query to use for retrieving data
  ##
  ## 
  ## additional columns, should *not* contain parameters, all added column names must be filtered
  #set($fromSql = '')
  ## parametrized filter part of the query
  #set($whereSql = '')
  ## list of parameters to use with $whereSql
  #set($whereParams = [])
  #set($class = $xwiki.getDocument($className).getxWikiClass())
  ##
  ## Add the columns needed for the actual data
  ##

  #foreach($colname in $collist)
    #livetable_addColumnToQuery($colname)
  #end

  ##
  ##
  ## Order
  ##
  #set($order = "$!request.sort")
  #if($order != '')
    #set($orderDirection = "$!{request.get('dir').toLowerCase()}")
    #if("$!orderDirection" != '' &amp;&amp; "$!orderDirection" != 'asc')
      #set($orderDirection = 'desc')
    #end
    #if($order == 'description')
      #set($tableAlias = 'dtable')
    #else
      #set($tableAlias = $order)
    #end
    ## only safe version should be used in SQL queries
    #set($safe_tableAlias = "$!{tableAlias.replaceAll('[^a-zA-Z0-9_.]','')}")
    ##
    #if($order.startsWith('doc.'))
      #set($orderSql = " order by ${safe_tableAlias.replace('_','.')} ${orderDirection}")
    #elseif($tablelist.contains($tableAlias))
      #set ($multiselect = "$!{class.get($order).getProperty('multiSelect').getValue()}")
      #if ($multiselect != '1')
        #set ($orderSql = " order by ${safe_tableAlias}.value ${orderDirection}")
      #end
    #elseif($order == 'averagevote')
      #livetable_getTableName($order)
      #set($fromSql = "${fromSql}, BaseObject as objratings, ${tableName} ${safe_tableAlias}")
      #set($whereSql = "${whereSql} and doc.fullName=objratings.name and objratings.className='XWiki.AverageRatingsClass' and objratings.id=${safe_tableAlias}.id.id and ${safe_tableAlias}.name = ?")
      #set($discard = $whereParams.add("${order}"))
      #set($orderSql = " order by ${safe_tableAlias}.value ${orderDirection}")
    #else
      #set($multiselect = $class.get($order).getProperty('multiSelect').getValue())
      #if("$multiselect" != '1')
        #livetable_getTableName($order)
        #set($fromSql = "${fromSql}, ${tableName} ${safe_tableAlias}")
        #set($whereSql = "${whereSql} and obj.id=${safe_tableAlias}.id.id and ${safe_tableAlias}.name = ?")
        #set($discard = $whereParams.add("${order}"))
        #set($orderSql = " order by ${safe_tableAlias}.value ${orderDirection}")
      #end
    #end
  #end
  ##
  ##
  ## Compute the final queries
  ##
  #set($sqlParams = [])
  #set($tagsMatchingParams = [])
  #set($allMatchingParams = [])
  #if("$!className" != '')
    ## Class query
    #set($countSql = ", BaseObject as obj $!fromSql $!filterfrom where obj.name=doc.fullName and obj.className = ? and doc.fullName not in (?, ?) $!whereSql $!filterwhere")
    #set($discard = $sqlParams.addAll(["${className}", "${className}Template", ${className.replaceAll('Class$', 'Template')}]))
    #set($discard = $sqlParams.addAll($whereParams))   
    ##
    #if($filterParams)
      #set($discard = $sqlParams.addAll($filterParams))
    #end
  #else
    ## Document query
    #set($countSql = "$!fromSql $!filterfrom where 1=1 $!whereSql $!filterwhere")
    #set($discard = $sqlParams.addAll($whereParams))
    ##
    #if($filterParams)
      #set($discard = $sqlParams.addAll($filterParams))
    #end
  #end
  #set($sql = "select doc.fullName, obj.number from XWikiDocument as doc $countSql $!{orderSql}")
  #set($items = $xwiki.search($sql, $limit, $offset, $sqlParams))
  #set($totalItems = $xwiki.search($sql, 0, 0, $sqlParams).size())
  #set($returnedItems = $items.size())
  ##
  ##
  ## ==============================================
  ## json starts
  ## ==============================================
{
  #if("$!request.sql" == '1')
    "sql": "$escapetool.javascript($sql)",
    "countsql": "$escapetool.javascript($countSql)",
    "params": "$escapetool.javascript($sqlParams)"
  #end
  "totalrows": $totalItems,
  "matchingtags": {},
  "tags" : [],
  "returnedrows": #if($returnedItems &lt; $limit) $returnedItems #else $limit #end,
  "offset": $mathtool.add($offset, 1),
  "reqNo": $util.parseInt($request.reqNo),
  "rows": [
    #foreach($item in $items)
     #set($viewable = $xwiki.hasAccessLevel('view', $context.user, "${context.database}:${item.get(0)}"))
     #if($velocityCount &gt; 1) , #end
     {
      "doc_viewable" : $viewable,
      #if(!$viewable)
        "doc_fullname" : "$escapetool.javascript(${context.database}):$escapetool.javascript(${item.get(0)})"
      #else
        #set($itemDoc = $xwiki.getDocument($item.get(0)))
        #set($fullname = "${itemDoc.wiki}:${itemDoc.space}.${itemDoc.name}")
        #set($discard = $itemDoc.use($className))
        #set($itemUrl = $xwiki.getURL($item.get(0)))
        #set($spaceUrl = $xwiki.getURL("${itemDoc.wiki}:${itemDoc.space}.WebHome"))
        #if($xwiki.isVirtualMode())
          #set($wiki = $itemDoc.wiki)
          #set($wikiUrl = $xwiki.getURL("${itemDoc.wiki}:Main.WebHome"))
        #end
        #set($editUrl = $itemDoc.getURL($itemDoc.defaultEditMode))
        #set($copyUrl = $itemDoc.getURL('view', 'xpage=copy'))
        #set($deleteUrl = $itemDoc.getURL('delete'))
        #set($renameUrl = $itemDoc.getURL('view', 'xpage=rename&amp;step=1'))
        #set($rightsUrl = $itemDoc.getURL('edit', 'editor=rights'))
        "doc_name" : "$escapetool.javascript($itemDoc.name)",
        "doc_fullname" : "$escapetool.javascript($fullname)",
        "doc_space" : "$escapetool.javascript(${itemDoc.space})",
        "doc_url" : "$escapetool.javascript(${itemUrl})",
        "doc_space_url" : "$escapetool.javascript(${spaceUrl})",
        #if($xwiki.isVirtualMode())
          "doc_wiki" : "$escapetool.javascript($wiki)",
          "doc_wiki_url" : "$escapetool.javascript($wikiUrl)",
        #end
        "doc_hasadmin"  : $xwiki.hasAdminRights(),
        "doc_hasedit" : $xwiki.hasAccessLevel('edit', $context.user, $fullname),
        "doc_hasdelete" : $xwiki.hasAccessLevel('delete', $context.user, $fullname),
        "doc_edit_url" : "$escapetool.javascript($editUrl)",
        "doc_copy_url"   : "$escapetool.javascript($copyUrl)",
        "doc_delete_url" : "$escapetool.javascript($deleteUrl)",
        "doc_rename_url" : "$escapetool.javascript($renameUrl)",
        "doc_rights_url" : "$escapetool.javascript($rightsUrl)",
        "doc_author_url" : "$escapetool.javascript($xwiki.getURL($itemDoc.author))",
        "doc_date" : "$escapetool.javascript(${xwiki.formatDate($itemDoc.date)})",
        "doc_title" : "$escapetool.javascript($escapetool.xml(${itemDoc.plainTitle}))",
        "doc_author" : "$escapetool.javascript(${xwiki.getLocalUserName($itemDoc.author, false)})",
        "doc_creationDate" : "$escapetool.javascript(${xwiki.formatDate($itemDoc.creationDate)})",
        "doc_creator" : "$escapetool.javascript(${xwiki.getLocalUserName($itemDoc.creator, false)})"
        #foreach($colname in $collist)
          #if($colname.startsWith('doc.'))
          #elseif($colname == '_action') ,
            #set($text = $msg.get("${request.transprefix}actiontext"))
           "$escapetool.javascript(${colname})" : "$escapetool.javascript(${text})"
          #elseif($colname == '_attachments') ,
            #livetable_getAttachmentsList($itemDoc)
            "$escapetool.javascript(${colname})" : "$escapetool.javascript(${attachlist})"
          #elseif($colname == '_avatar') ,
            #livetable_getAvatar($itemDoc)
            "$escapetool.javascript(${colname})" : "$escapetool.javascript(${avatar})"
          #elseif($colname == '_images') ,
            #livetable_getImagesList($itemDoc)
            "$escapetool.javascript(${colname})" : "$escapetool.javascript(${imagesList})"
          ## ------------------------------------------------------------------
          ## Start Weekly Activity
          ## ------------------------------------------------------------------
          #elseif($className == 'WeeklyActivityCode.PlannedActivityClass' || $className == 'WeeklyActivityCode.DoneActivityClass')
            #set($aObj = $itemDoc.getObject($className, $item.get(1)))
            #set($userDoc = $!xwiki.getDocument($!aObj.getProperty('user').value))
            #if($colname == 'user') ,
              ## User
              #set($userName = $!aObj.getProperty('user').value)
              #set($userNameValue = $userName)
              #set($userURL = $xwiki.getURL($userNameValue))
              #if("$!userName"!= '' &amp;&amp; $xwiki.exists($userName))
                #set($userObj = $!userDoc.getObject('XWiki.XWikiUsers'))
                #set($userName = $!userObj.getProperty('first_name').value + ' ' + $userObj.getProperty('last_name').value + ' (' + $!userDoc.name + ')')
                "user_url" : "$!escapetool.javascript($!userURL)",
              #else
                "user_url" : "$escapetool.javascript(${itemUrl})",
              #end
              "user" : "$!escapetool.javascript($!userName)",
              "user_value" : "$!escapetool.javascript($!userNameValue)"
            #elseif($colname == 'project') ,
              ## Project
              #set($projectName = $!aObj.getProperty('project').value)
              #if("$!projectName" != "")
                #set($projectTitle = $!xwiki.getDocument("Projects.${projectName}").displayTitle)
              #else
                #set($projectTitle = "")
              #end
              "project" : "$!escapetool.javascript($!projectTitle)",
              "project_value" : "$!escapetool.javascript($!projectName)"
              #if($xwiki.exists('ProjectsCode.ProjectsCodeClass'))
                #if($xwiki.exists("${projectName}"))
                  #set($projectTitle = $!xwiki.getDocument("Projects.${projectName}").displayTitle)
                  #set($projectURL = $xwiki.getURL("${projectName}"))
                  , "project_url" : "$!escapetool.javascript($projectURL)"
                #else
                  #set($projectTitle = $projectName)
                  #set($projectURL = $xwiki.getURL("Projects.WebHome"))
                  , "project_url" : "$!escapetool.javascript($projectURL)"
                #end
              #end
            #elseif($className == 'WeeklyActivityCode.PlannedActivityClass' &amp;&amp; $colname == 'days') ,
              ## Days
              #set($displayDays = '')
              #set($days = $!aObj.getProperty('days').value)
              #set($dayCount = 0)
              #foreach($dayIndex in $days)
                #set($dayCount = $dayCount + 1)
                #set($displayDays = $displayDays + "&lt;span class='done-days'&gt;" + $msg.get('weeklyActivity.livetable.doneDays', [$!util.parseInt($!dayIndex)]) + "&lt;/span&gt;")
              #end
              #if($dayCount &gt;= 5)
                #set($displayDays = "&lt;span class='allweek'&gt;All week&lt;/span&gt;")
              #end
              "days" : "&lt;p&gt;$!escapetool.javascript($!displayDays)&lt;/p&gt;"
            #elseif($colname == 'priority') ,
              ## Priority
              "priority" : "$escapetool.javascript($!aObj.display('priority', 'view'))"
            #elseif($colname == 'hours') ,
              ## HoursPriority
              #set($hours = 0)
              #foreach($dayIndex in [1..7])
                #set($hoursPerDay = $!aObj.getProperty("hours_${dayIndex}").value)
                #if("$!hoursPerDay" != '')
                  #set($hours = $hours + $hoursPerDay)
                #end
              #end
              "hours" : "$!escapetool.javascript($!hours)"
            #else , ## Details
              "details" : "$!escapetool.javascript($!aObj.getProperty('details').value)"
            #end
          ## ------------------------------------------------------------------
          ## End Weekly Activity
          ## ------------------------------------------------------------------
          #else ,
            #set($propClassName = "$!{request.get(${colname.concat('_class')})}")
            #if($propClassName != '')
              #set($propClass = $xwiki.getDocument($propClassName).getxWikiClass())
              #set($discard = $itemDoc.use($propClassName))
            #else
              #set($propClass = $class)
            #end
            ## Retrieve the property type as it might be usefull
            #set($propType = '')
            #if($listtool.contains($propClass.getPropertyNames(), $colname))
              #set($propType = "$!{propClass.get($colname).type}")
            #end
            #set($fieldValue = "$!itemDoc.getValue($colname)")
            #set($fieldDisplayValue = "$!itemDoc.display($colname, 'view')")
            #if($fieldDisplayValue == '')
              #set($fieldDisplayValue = $msg.get("${request.transprefix}emptyvalue"))
            #end
            #set($fieldUrl = '')
            ## only retrieve an URL for a DBListClass item
            #if($propType == 'DBListClass')
              #set($fieldUrl = $xwiki.getDocument($fieldValue).getURL())
              #if($fieldUrl == $xwiki.getURL('Main.WebHome'))
                #set($fieldUrl = '')
              #end
            #end
            "$escapetool.javascript(${colname})" : "$escapetool.javascript($fieldDisplayValue.replaceFirst($regextool.quote('{{html clean="false" wiki="false"}}'), '').replaceAll("$regextool.quote('{{/html}}')$", ''))",
            "$escapetool.javascript(${colname})_value" : "$escapetool.javascript(${fieldValue})",
            "$escapetool.javascript(${colname})_url" : "$escapetool.javascript(${fieldUrl})"
            ## reset to the default class
            #set($discard = $itemDoc.use($className))
          #end
        #end
      #end
     }
    #end
  ]}
## ==============================================
## json ended
## ==============================================
#end

#**
 * Macro to extend the query to select the properties for the livetable columns.
 * NOTE $colname is filtered (all characters but [a-zA-Z0-9_.] are removed) before use
 *#
#macro(livetable_addColumnToQuery $colname)
  #set($filterValue = "$!{request.get($colname)}")
  #if($colname == 'description')
    #set($tableAlias = 'dtable')
  #else
    #set($tableAlias = $colname)
  #end
  ## only safe versions should be used in SQL queries
  #set($safe_colname = "$!{colname.replaceAll('[^a-zA-Z0-9_.]','')}")
  #set($safe_tableAlias = "$!{tableAlias.replaceAll('[^a-zA-Z0-9_.]','')}")
  ##
  #set($propType = '')
  #set($propClassName = "$!request.get(${colname.concat('_class')})")
  #if($propClassName != '')
    #set($propClass = $xwiki.getDocument($propClassName).getxWikiClass())
  #else
    #set($propClass = $class)
  #end
  #if($propClass &amp;&amp; $listtool.contains($propClass.getPropertyNames(), $colname))
    #set($propType = "$!{propClass.get($colname).type}")
  #end
  ##
  ## Filter values
  #if("$!filterValue" != '')
    #set($discard = $tablelist.add($tableAlias))
    #if($colname.startsWith('doc.'))
      #set($whereSql = "${whereSql} and upper(str(${safe_colname.replace('_','.')})) like upper(?)")
      #set($discard = $whereParams.add("%${filterValue}%"))
    #elseif($propType == 'NumberClass' || $propType == 'BooleanClass')
      #livetable_getTableName($colname)
      #set($fromSql = "${fromSql}, ${tableName} ${safe_tableAlias}")
      #set($whereSql = "${whereSql} and obj.id=${safe_tableAlias}.id.id and ${safe_tableAlias}.id.name = ? and ${safe_tableAlias}.value = ?")
      #set($discard = $whereParams.addAll(["${colname}", $util.parseInt(${filterValue})]))
    #elseif($propType == 'DateClass')
      #set($fromSql = "${fromSql}, DateProperty ${safe_tableAlias}")
      #set($whereSql = "${whereSql} and obj.id=${safe_tableAlias}.id.id and ${safe_tableAlias}.id.name = ? and upper(str(${safe_tableAlias}.value)) like upper(?)")
      #set($discard = $whereParams.addAll(["${colname}", "%${filterValue}%"]))
    #elseif($propType == 'TextAreaClass' || $propType == 'UsersClass' || $propType == 'GroupsClass')
      #set($fromSql = "${fromSql}, LargeStringProperty ${safe_tableAlias}")
      #set($whereSql = "${whereSql} and obj.id=${safe_tableAlias}.id.id and ${safe_tableAlias}.id.name = ? and upper(${safe_tableAlias}.value) like upper(?)")
      #set($discard = $whereParams.addAll(["${colname}", "%${filterValue}%"]))
    #elseif($propType == 'StaticListClass' || $propType == 'DBListClass' || $propType == 'DBTreeListClass')
      #set($multiSelect = $propClass.get($colname).getProperty('multiSelect').getValue())
      #set($relationalStorage = $propClass.get($colname).getProperty('relationalStorage').getValue())
      #if($multiSelect == 1)
        #if($relationalStorage == 1)
          #set($fromSql = "${fromSql}, DBStringListProperty ${safe_tableAlias}")
          #set($whereSql = "${whereSql} and obj.id=${safe_tableAlias}.id.id and ${safe_tableAlias}.id.name = ? and ? in elements(${safe_tableAlias}.list)")
          #set($discard = $whereParams.addAll(["${colname}", "${filterValue}"]))
        #else
          #set($fromSql = "${fromSql}, StringListProperty ${safe_tableAlias}")
          #set($whereSql = "${whereSql} and obj.id=${safe_tableAlias}.id.id and ${safe_tableAlias}.id.name = ? and concat('|', concat(upper(${safe_tableAlias}.textValue), '|')) like upper(?)")
          #set($discard = $whereParams.addAll(["${colname}", "%|${filterValue}|%"]))
        #end
      #else
        ## ------------------------------------------------------------------
        ## Start Weekly Activity
        ## filter by user / project
        ## ------------------------------------------------------------------
        #set($fromSql = "${fromSql}, StringProperty ${safe_tableAlias}")        
        #if(("$!{colname}" == 'user' || "$!{colname}" == 'project') &amp;&amp; ($className == 'WeeklyActivityCode.PlannedActivityClass' || $className == 'WeeklyActivityCode.DoneActivityClass'))
          #set($whereSql = "${whereSql} and obj.id=${safe_tableAlias}.id.id and ${safe_tableAlias}.id.name = ? and upper(${safe_tableAlias}.value) like upper(?)") 
          #set($discard = $whereParams.addAll(["${colname}", "%${filterValue}%"])) 
        #else          
          #set($whereSql = "${whereSql} and obj.id=${safe_tableAlias}.id.id and ${safe_tableAlias}.id.name = ? and ${safe_tableAlias}.value = ?")
          #set($discard = $whereParams.addAll(["${colname}", "${filterValue}"]))      
        #end
        ## ------------------------------------------------------------------
        ## End Weekly Activity
        ## ------------------------------------------------------------------
      #end
    #else
      ## ------------------------------------------------------------------
      ## Start Weekly Activity
      ## filter by team
      ## ------------------------------------------------------------------
      #if("$!{colname}" == 'team' &amp;&amp; ($className == 'WeeklyActivityCode.PlannedActivityClass' || $className == 'WeeklyActivityCode.DoneActivityClass'))
        #set($currentDB = $context.database)
        #set($discard = $context.setDatabase('xwiki'))
        #set($query = "select distinct(concat('xwiki:',doc.fullName)) from XWikiDocument as doc, BaseObject as obj, IntegerProperty as active, BaseObject as tagObj, DBStringListProperty as tagProp join tagProp.list as tag where 
        doc.fullName=obj.name and 
        obj.className = ? and 
        doc.fullName = tagObj.name and 
        tagObj.className = ? and 
        tagObj.id = tagProp.id.id and 
        tagProp.name = ? and
        upper(tag) like upper(?) and
        active.id.id = obj.id and 
        active.id.name = ? and 
        active.value = ?")
        #set($usersInTeamLike = $xwiki.search($query, 0, 0, ['XWiki.XWikiUsers', 'XWiki.TagClass', 'tags', "%${filterValue}%", 'active', 1]))
        #set($discard = $context.setDatabase($currentDB))
        #if($usersInTeamLike.size() &gt; 0)
          ## Build list of users from teams like the given filter
          #set($whereSql = "${whereSql} and (")
          #foreach($item in $usersInTeamLike)
            #if($velocityCount &gt; 1)          
              #set($whereSql = "${whereSql} or ")
            #end
            #set($whereSql = "${whereSql} user.value = ?")
            #set($discard = $whereParams.addAll(["${item}"])) 
          #end
          #set($whereSql = "${whereSql})")          
          #if($fromSql.indexOf('user') &lt; 0)
            #set($fromSql = "${fromSql}, StringProperty user")
          #end
          #if($fromSql.indexOf('user.id.name') &lt; 0)
            #set($whereSql = "${whereSql} and obj.id=user.id.id and user.id.name = ?")
            #set($discard = $whereParams.addAll(['user']))              
          #end          
        #else
          ## No such team
          #set($whereSql = "${whereSql} and 0=1")
        #end
      ## ------------------------------------------------------------------
      ## End Weekly Activity
      ## ------------------------------------------------------------------
      #else
        #set($fromSql = "${fromSql}, StringProperty ${safe_tableAlias}")
        #set($whereSql = "${whereSql} and obj.id=${safe_tableAlias}.id.id and ${safe_tableAlias}.id.name = ? and upper(${safe_tableAlias}.value) like upper(?)")
        #set($discard = $whereParams.addAll(["${colname}", "%${filterValue}%"]))
      #end
    #end
  #end
#end

{{/velocity}}</content>
</xwikidoc>
